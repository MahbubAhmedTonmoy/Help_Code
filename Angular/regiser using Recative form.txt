
scr
	app
		_model
			generate interface 

		user.ts
		
		export interface User {
			  id: number;
			  username: string;
			  knownAs: string;
			  age: number;
			  gender: string;
			  created: Date;
			  lastActive: Date;
			  photoUrl: string;
			  city: string;
			  country: string;
			  interests?: string;  // ? means optional
			  introduction?: string;
			  lookingFor?: string;
			  photos?: Photo[];
		}
------------------------------------
service add

 auth.service.ts
		 
		import { Injectable } from '@angular/core';
		import { HttpClient } from '@angular/common/http';
		import {BehaviorSubject} from 'rxjs';
		import { map } from 'rxjs/operators';
		import { JwtHelperService } from '@auth0/angular-jwt';
		import { environment } from '../../environments/environment';
		import { User } from '../_models/user';

		@Injectable({
		  providedIn: 'root'
		})
		export class AuthService {
		  baseUrl = environment.apiUrl + 'auth/';

		  constructor(private http: HttpClient) {}
		

		  register(user: User) {
			return this.http.post(this.baseUrl + 'register', user);
		  }

		}


-----------------------------------
app.moude.ts

	import: [
		ReactiveFromsModule
	]
------------------------------------		

register Component
-------------------

		register.component.ts

		import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
		import { AuthService } from '../_services/auth.service';
		import { AlertifyService } from '../_services/alertify.service';
		import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
		import { BsDatepickerConfig } from 'ngx-bootstrap';
		import { User } from '../_models/user';
		import { Router } from '@angular/router';

		@Component({
		  selector: 'app-register',
		  templateUrl: './register.component.html',
		  styleUrls: ['./register.component.css']
		})
		export class RegisterComponent implements OnInit {
		  
		  user: User;
		  registerForm: FormGroup; // cz reactive form
		  bsConfig: Partial<BsDatepickerConfig>; // dateOfBirth date picker

		  constructor(private authService: AuthService, private router: Router,
			private alertify: AlertifyService, private fb: FormBuilder) { }

		  ngOnInit() {
			this.bsConfig = { // date picker
			  containerClass: 'theme-red'
			};
			this.registerForm = new FormGroup({
			  gender: ['male'],
			  username: ['', Validators.required]
			  dateOfBirth: [null, Validators.required],
			  city: ['', Validators.required],
			  country: ['', Validators.required],
			  password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]],
			  confirmPassword: ['', Validators.required]
			}, {validator: this.passwordMatchValidator});
		  }

		 

		  passwordMatchValidator(g: FormGroup) {
			return g.get('password').value === g.get('confirmPassword').value ? null : {'mismatch': true};
		  }

		  register() {
			if (this.registerForm.valid) {
			  this.user = Object.assign({}, this.registerForm.value); // this.registerForm.value clone ihe value in {} empty object ,then assign {} to this.user
			  this.authService.register(this.user).subscribe(() => {
				this.alertify.success('Registration successful');
			  }, error => {
				this.alertify.error(error);
			  }, () => {
				this.authService.login(this.user).subscribe(() => {
				  this.router.navigate(['/members']);
				});
			  });
			}
		  }

		 
		}



html:
		<form [formGroup]="registerForm" (ngSubmit)="register()">
			  ---------------------------
		 <h2 class="text-center text-primary">Sign Up</h2>
		  <hr>

		  <div class="form-group">
			  <label class="control-label" style="margin-right:10px">I am a: </label>
			  <label class="radio-inline">
				<input class="mr-3" type="radio" value="male" formControlName="gender">Male
															-------------------------	
			 </label>
			  <label class="radio-inline ml-3">
				<input class="mr-3" type="radio" value="female" formControlName="gender">Female
																-------------------------
			  </label>
			</div>

		  <div class="form-group">
			<input type="text" 
			  [ngClass]="{'is-invalid': registerForm.get('username').errors 
				&& registerForm.get('username').touched}"
			  class="form-control" 
			  formControlName="username"
			---------------------------
			  placeholder="Username">
			<div class="invalid-feedback">Please choose a username</div>
		  </div>

		  <div class="form-group">
			  <input [ngClass]="{'is-invalid': registerForm.get('knownAs').errors && registerForm.get('knownAs').touched}" class="form-control"
				placeholder="Known as" formControlName="knownAs">
			  <div class="invalid-feedback" *ngIf="registerForm.get('knownAs').touched && registerForm.get('knownAs').hasError('required')">Known as is required</div>
			</div>

			<div class="form-group">
				<input [ngClass]="{'is-invalid': registerForm.get('dateOfBirth').errors && registerForm.get('dateOfBirth').touched}" class="form-control"
				  placeholder="Date of Birth" formControlName="dateOfBirth" type="text" bsDatepicker [bsConfig]="bsConfig">
				<div class="invalid-feedback" *ngIf="registerForm.get('dateOfBirth').touched && registerForm.get('dateOfBirth').hasError('required')">Date of Birth is required</div>
			  </div>

			  <div class="form-group">
				  <input [ngClass]="{'is-invalid': registerForm.get('city').errors && registerForm.get('city').touched}" class="form-control"
					placeholder="City" formControlName="city">
				  <div class="invalid-feedback" *ngIf="registerForm.get('city').touched && registerForm.get('city').hasError('required')">City is required</div>
				</div>
			  
				<div class="form-group">
				  <input [ngClass]="{'is-invalid': registerForm.get('country').errors && registerForm.get('country').touched}" class="form-control"
					placeholder="Country" formControlName="country">
				  <div class="invalid-feedback" *ngIf="registerForm.get('country').touched && registerForm.get('country').hasError('required')">Country is required</div>
				</div>

		  <div class="form-group">
			<input type="password" 
			  [ngClass]="{'is-invalid': registerForm.get('password').errors 
				&& registerForm.get('password').touched}"
			  class="form-control" 
			  formControlName="password" 
			  placeholder="Password">
			  <div class="invalid-feedback" 
				*ngIf="registerForm.get('password').hasError('required') 
				  && registerForm.get('password').touched">
				  Password is required
			  </div>
			  <div class="invalid-feedback" 
			  *ngIf="registerForm.get('password').hasError('minlength') 
				&& registerForm.get('password').touched">
				Password must be at least 4 characters
			</div>
			<div class="invalid-feedback" 
			*ngIf="registerForm.get('password').hasError('maxlength') 
			  && registerForm.get('password').touched">
			  Password cannot exceed 8 characters
		  </div>
		  </div>

		  <div class="form-group">
			  <input 
				[ngClass]="{'is-invalid': registerForm.get('confirmPassword').errors 
				  && registerForm.get('confirmPassword').touched
				  || registerForm.get('confirmPassword').touched
				  && registerForm.hasError('mismatch')}"
				type="password" 
				class="form-control" 
				formControlName="confirmPassword" 
				placeholder="Confirm Password">
				<div class="invalid-feedback" 
				*ngIf="registerForm.get('confirmPassword').hasError('required') 
				  && registerForm.get('confirmPassword').touched">
				  Confirm Password is required
			  </div>
			  <div class="invalid-feedback" 
			  *ngIf="registerForm.hasError('mismatch') 
				&& registerForm.get('confirmPassword').touched">
				Passwords must match
			</div>
			</div>

		  <div class="form-group text-center">
			<button class="btn btn-success" [disabled]="!registerForm.valid" type="submit">Register</button>
		  </div>
		  
		</form>
------------------------------------------------------------------------------------------------------------------------