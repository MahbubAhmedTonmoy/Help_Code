model
------------

			public class User
			{
				public int Id { get; set; }
				public string Username { get; set; }
				public byte[] PasswordHash { get; set; }
				public byte[] PasswordSalt { get; set; }
				public string Gender { get; set; }
				public DateTime DateOfBirth { get; set; }
				public string KnownAs { get; set; }
				public DateTime Created { get; set; }
				public DateTime LastActive { get; set; }
				public string Introduction { get; set; }
				public string LookingFor { get; set; }
				public string Interests { get; set; }
				public string City { get; set; }
				public string Country { get; set; }
				
			}
------------------------------------------

DTO

    public class UserForDetailedDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Gender { get; set; }
        public int Age { get; set; }
        public string KnownAs { get; set; }
        public DateTime Created { get; set; }
        public DateTime LastActive { get; set; }
        public string Introduction { get; set; }
        public string LookingFor { get; set; }
        public string Interests { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }
	public class UserForListDto
    {
        public int Id { get; set; }
        public string Username { get; set; }
        public string Gender { get; set; }
        public int Age { get; set; }
        public string KnownAs { get; set; }
        public DateTime Created { get; set; }
        public DateTime LastActive { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }
	public class UserForUpdateDto
    {
        public string Introduction { get; set; }
        public string LookingFor { get; set; }
        public string Interests { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }
	
-------------------------------------
repo

interface:  
		public interface IDatingRepository
		{
			 void Add<T>(T entity) where T: class;
			 void Delete<T>(T entity) where T: class;
			 Task<bool> SaveAll();
			 Task<User> GetUser(int id);
			 Task<IEnumerable<User>>GetUsers(); 
			
		}
implement:

	public class DatingRepository : IDatingRepository
    {
        private readonly DataContext _context;
        public DatingRepository(DataContext context)
        {
            _context = context;
        }
		
	public void Add<T>(T entity) where T : class
        {
            _context.Add(entity);
        }

        public void Delete<T>(T entity) where T : class
        {
            _context.Remove(entity);
        }
		
	public async Task<User> GetUser(int id)
        {
            var user = await _context.Users.Include(p => p.Photos).FirstOrDefaultAsync(u => u.Id == id);

            return user;
        }
	
	public async Task<User> GetUsers()
        {
            var users = await _context.Users.ToListAsync;

            return users;
        }
	
	public async Task<bool> SaveAll()
        {
            return await _context.SaveChangesAsync() > 0;
        }
	}
	
	
	***********************************************
	 in startup.cs
		configurServices()
		{
			services.AddScoped<IDatingRepository,DatingRepository>();
		}
	***********************************************
----------------------------------
Automapper: 
 projectname.csproj
 
 <itemGroup>
	<PackageRegerence Include="Automapper.Extensions.Microsoft.DependencyInjection" Version="-----"/>
 </itemGroup>
	***********************************************
	 in startup.cs
		configurServices()
		{
			services.AddAutoMapper(typeof(Startup));
		}
	***********************************************

	
	AutomapperProfile.cs
		public AutoMapperProfiles: Profile
		{
			public AutoMapperProfiles(){
				CreateMap<User, UserForListDto>();
				
				CreateMap<User, UserForDetailedDto>();
				
				CreateMap<UserForUpdateDto, User>(); // <Tsource, Tdestination>
			}
		}
	
---------------------------------
controller: api controller

	[ServiceFilter(typeof(LogUserActivity))]
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        private readonly IDatingRepository _repo;
        private readonly IMapper _mapper; // Automapper another file

        public UsersController(IDatingRepository repo, IMapper mapper)
        {
            _mapper = mapper;
            _repo = repo;
        }
		
	[HttpGet]
        public async Task<IActionResult> GetUsers()
        {
            var users = await _repo.GetUsers();
	    var usersToReturn = _mapper.Map<IEnumerable<UserForListDto>>(users);
            return Ok(usersToReturn);
        }
		
	[HttpGet("{id}")]
        public async Task<IActionResult> GetUser(int id)
        {
            var user = await _repo.GetUser(id);
			
	    var UserTOReturn = _mapper.Map<UserForDetailedDto>(User);
				       // ---destination---- source
			
            return Ok(UserTOReturn);
        }
	
	 //api/users/1
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateUser(int id, [FromBody] UserForUpdateDto userForUpdateDto )
        {
            if(!ModelState.IsValid) return BadRequest(ModelState);

            var currentUserId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value);

            var userFromRepo = await _repo.GetUser(id);

            if(userFromRepo == null) 
                return NotFound($"Could not find user with an id of {id}");
            if(currentUserId != userFromRepo.Id) 
            return Unauthorized();

            _mapper.Map(userForUpdateDto, userFromRepo);

            if(await _repo.SaveAll()) return NoContent();

            throw new Exception($"updating user {id} failed to save");
     }
		
	}
