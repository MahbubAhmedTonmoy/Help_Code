using System;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.DependencyInjection;
using PFApi.IRepository;

namespace PFApi.Helpers
{
    public class LogUserActivity : IAsyncActionFilter 
    {
        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            // Do something before the action executes.

            // next() calls the action method.
            var resultContext = await next();
            // resultContext.Result is set.
            // Do something after the action executes.

            var userId = int.Parse(resultContext.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value);

            var repo = resultContext.HttpContext.RequestServices.GetService<IPFRepo>();
            var user = await repo.GetUser(userId);

            user.LastActive =DateTime.Now;

            await repo.SaveAll();
        }
    }
}
-------------------------------------------------------------

services.AddScoped<LogUserActivity>();



==============================================================
set top of the controller

[ServiceFilter(typeof(LogUserActivity))]

